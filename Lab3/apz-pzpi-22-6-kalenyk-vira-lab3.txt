МІНІСТЕРСТВО ОСВІТИ I НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії




ЗВІТ
до лабораторної роботи № 3
з дисципліни «Архітектура програмного забезпечення»
на тему «Розробка програмної архітектури та створення і відлагодження програмного коду веб клієнта програмної системи»




Виконала:                                                     			Перевірив:
ст. гр. ПЗПІ-22-6,                                           	 	    ст. викл. каф. ПІ,
Каленик Віра Олександрівна					                                Сокорчук Ігор Петрович






Харків 2025

1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	28.05.2025	0.1	Оформлено титульну сторінку звіту, сформовано перелік завдань, підготовлено розділ «Завдання».
2	29.05.2025	0.2	Створено UML-діаграми: Deployment Diagram, Use Case Diagram, ER Diagram та Component Diagram. Сформовано розділ «Опис виконаної роботи».
3	29.05.2025	0.3	Проведено тестування основних сценаріїв роботи, оновлено розділ «Висновки» та додано додатки з фрагментами коду..

2 ЗАВДАННЯ

Завдання до лабораторної 3:
1.	Розробити архітектуру клієнтської (front-end) частини програмної системи.
2.	Реалізувати веб-клієнт програмної системи, забезпечивши авторизацію, відображення основних даних, підтримку роботи з API та реалізацію ролей користувачів і адміністраторів.
3.	Створити інтерфейс адміністрування системи з можливістю управління користувачами, даними, резервним копіюванням налаштувань і даних, експортом та імпортом даних, керуванням сертифікатами та іншими ключовими функціями згідно з вимогами до адміністративної панелі.
4.	Реалізувати механізми захисту персональних даних на рівні клієнтської частини (робота з токенами, зберігання даних, захищена аутентифікація, обмеження доступу до ресурсів).
5.	Розробити й оформити діаграми UML: діаграму прецедентів (Use Case Diagram), діаграму компонент (Component Diagram), а також не менше двох діаграм на вибір.
6.	Провести функціональне тестування веб-клієнта, перевірити коректність основних сценаріїв роботи, підтримку авторизації, налаштування локалізації, роботу адміністративної панелі та взаємодію з серверною частиною через API.
7.	Створити та опублікувати на YouTube відеозапис тестування з демонстрацією основного функціоналу веб-клієнта, адміністрування та поясненням прийнятих інженерних рішень.
8.	Оформити звіт за результатами лабораторної роботи, додавши розділи: аналіз завдання, опис архітектури, специфікацію реалізованих функцій, UML-діаграми, текстовий опис програмної реалізації, результати тестування, висновки та додатки із фрагментами коду.
9.	Завантажити звіт у форматі PDF на платформу dl.nure.ua та додати посилання на YouTube-відео в коментарях до роботи.

3	ОПИС ВИКОНАНОЇ РОБОТИ

1.	Розроблено архітектуру веб-клієнта системи контролю свіжості продуктів у холодильнику за моделлю SPA (Single Page Application), спроєктовано основну структуру, визначено модулі, компоненти, сервіси та схеми взаємодії із серверною частиною через REST API.
2.	Реалізовано веб-клієнт на Angular, який забезпечує роботу з усіма ключовими сутностями: реєстрація, автентифікація (із підтримкою JWT), профіль користувача, холодильники, продукти, сенсори, історія даних сенсорів, отримання сповіщень та підтримка ролей.
3.	Створено адміністративну панель із багаторівневим керуванням доступом, яка дозволяє глобальному адміністратору, адміністратору бізнес-логіки та сервіс-адміністратору виконувати різні дії: перегляд і редагування користувачів, управління холодильниками, моніторинг сенсорів, аналіз аналітики та журналів подій, резервне копіювання й відновлення даних.
4.	Запроваджено інтерфейс для візуалізації аналітичних показників: реалізовано відображення динаміки температури та вологості у вигляді графіків, формування узагальнених аналітичних блоків (середнє значення, тренд, коефіцієнт стабільності, тривалість порушень).
5.	Реалізовано механізми захисту: захищене зберігання токенів у браузері, контроль прав доступу до ресурсів відповідно до ролі користувача.
6.	Розроблено та оформлено UML-діаграми для візуалізації архітектури й логіки клієнтської частини: діаграма прецедентів (Use Case), діаграма компонент, діаграма діяльності й діаграма станів.
7.	Проведено функціональне тестування веб-клієнта: перевірено коректність автентифікації, відображення списків сутностей, роботу аналітики, динамічне оновлення даних, адміністративні дії, багатомовність, а також взаємодію з API та обробку типових помилок.
8.	Підготовлено та опубліковано відеозапис із демонстрацією роботи клієнтської частини, з акцентом на ключові функції, сценарії використання, адміністративні можливості й налаштування.
9.	Оформлено звіт за результатами лабораторної роботи, що містить повний аналіз виконаних завдань, опис архітектури, специфікацію реалізованих функцій, UML-діаграми, опис реалізації, тестування, висновки та додатки з ключовими фрагментами коду.
 
4	ВИСНОВКИ

У результаті виконання лабораторної роботи було розроблено веб-клієнта програмної системи контролю свіжості продуктів у холодильнику відповідно до сучасних вимог до SPA-додатків. Сформовано архітектуру клієнтської частини, реалізовано авторизацію, багаторівневий розподіл ролей, адміністративний функціонал, візуалізацію аналітики, а також підтримку багатомовності. Проведене тестування підтвердило стабільну роботу основних сценаріїв, коректну інтеграцію з серверною частиною та зручність інтерфейсу для кінцевих користувачів і адміністраторів.
 
ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/hJeSg6lyreY.
Хронологічний опис доповіді: 
1. 00:00 - Привітання; 
2. 00:09 - Опис створених діаграм; 
3. 01:04 - Опис архітектури веб-клієнта програмної системи; 
4. 01:51 - Тестування реєстрації та авторизації; 
5. 02:52 - Тестування перегляду, додання та видалення холодильників користувачем; 
6. 03:36 - Тестування перегляду, додання та видалення продуктів та отримання повідомлень користувачем; 
7. 04:34 - Тестування перемикання мов між англійською та українською; 
8. 04:57 - Огляд аналітики холодильника (розрахунки та графіки); 
9. 06:51 - Огляд всіх функції адміністративної панелі як глобальний адміністратор; 
10. 08:29 - Огляд обмежень доступу до адміністративної панелі на прикладі адміністратора інфраструктури; 
11. 08:49 - Демонстрація коду, за допомогою якого було виконано обмеження доступів через роль, що записана в JWT-токен, коду для перекладу сторінок; 
12. 09:16 - Висновки та звершення.

Додаток Б
Графічні матеріали
 
Рисунок Б.1 - UML діаграма прецедентів

Рисунок Б.2 - Діаграма компонентів
 
Рисунок Б.3 - Діаграма взаємодії

Рисунок Б.4 - Діаграма станів 

Додаток В
Фрагменти коду

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab3/apz-pzpi-22-6-kalenyk-vira-lab3/src/app/core/utils/analytics.utils.ts.
1.	const temps = data.map(d => d.Temperature);
2.	const humidities = data.map(d => d.Humidity);
3.	
4.	const avgTemp = temps.reduce((a, b) => a + b, 0) / temps.length;
5.	const avgHumidity = humidities.reduce((a, b) => a + b, 0) / humidities.length;
6.	
7.	const variance = temps.reduce((sum, t) => sum + (t - avgTemp) ** 2, 0) / temps.length;
8.	const stddev = Math.sqrt(variance);
9.	const stabilityCoeff = 1 - stddev / avgTemp;
10.	
11.	const x = data.map((_, i) => i);
12.	const y = temps;
13.	const n = x.length;
14.	const sumX = x.reduce((a, b) => a + b, 0);
15.	const sumY = y.reduce((a, b) => a + b, 0);
16.	const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
17.	const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);
18.	const trend = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
19.	
20.	let maxViolation = 0, current = 0;
21.	for (const t of temps) {
22.	  if (t < 2 || t > 8) { current++; maxViolation = Math.max(maxViolation, current); }
23.	  else { current = 0; }
24.	}

В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab3/apz-pzpi-22-6-kalenyk-vira-lab3/src/app/pages/admin_panel/admin/users/users.component.ts.
1.	editUser(user: any) {
2.	  this.selectedUser = { ...user };
3.	  this.showEditModal = true;
4.	}
5.	
6.	saveUserChanges() {
7.	  this.adminService.updateUser(this.selectedUser).subscribe(() => {
8.	    this.loadUsers(); // Оновити список після зміни
9.	    this.showEditModal = false;
10.	  });
11.	}
12.	
13.	deleteUser(userId: string) {
14.	  if (confirm('Ви впевнені, що хочете видалити користувача?')) {
15.	    this.adminService.deleteUser(userId).subscribe(() => {
16.	      this.loadUsers();
17.	    });
18.	  }
19.	}

В.3 Резервне копіювання користувацьких даних
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab3/apz-pzpi-22-6-kalenyk-vira-lab3/src/app/pages/admin_panel/admin/database/database.component.ts.
1.	backupDatabase() {
2.	return this.http.post('/api/admin/backup', {});
3.	}
4.	restoreDatabase(file: File) {
5.	const formData = new FormData();
6.	formData.append('backup', file);
7.	return this.http.post('/api/admin/restore', formData);
8.	}

В.4 Візуалізація даних (графіки)
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab3/apz-pzpi-22-6-kalenyk-vira-lab3/src/app/pages/refrigerators/refrigerators.component.ts.
1.	const ctx = document.getElementById('myChart');
2.	new Chart(ctx, {
3.	  type: 'line',
4.	  data: {
5.	    labels: data.map((d, i) => i),
6.	    datasets: [
7.	      {
8.	        label: 'Температура',
9.	        data: temps,
10.	        borderColor: 'rgba(54, 162, 235, 1)',
11.	        fill: false
12.	      },
13.	      {
14.	        label: 'Вологість',
15.	        data: humidities,
16.	        borderColor: 'rgba(75, 192, 192, 1)',
17.	        fill: false
18.	      }
19.	    ]
20.	  },
21.	  options: { /* ... */ }
22.	});
