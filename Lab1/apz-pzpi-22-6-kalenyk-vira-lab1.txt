МІНІСТЕРСТВО ОСВІТИ I НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії




ЗВІТ
до лабораторної роботи № 1
з дисципліни «Архітектура програмного забезпечення»
на тему «Розробка Vision & Scope»




Виконала:                           Перевірив:
ст. гр. ПЗПІ-22-6,                  ст. викл. каф. ПІ,
Каленик Віра Олександрівна	    Сокорчук Ігор Петрович






Харків 2025

1 ІСТОРІЯ ЗМІН
№	Дата	Версія звіту	Опис змін та виправлень
1	28.04.2025	0.1	Оформлено титульну сторінку, створено розділ «Завдання»
2	28.04.2025	0.2	Створено розділ «Опис виконаної роботи», додаток А, написано розділ «Висновки»
3	29.04.2025	0.3	Додано додаток Б, виправлено оформлення (додано колонтитули, налаштовано міжрядкові інтервали, тощо)

2 ЗАВДАННЯ
Завдання до лабораторної 1:
1.	Взяти підготовлений раніше документ Vision and Scope і оновити його відповідно до нових вимог розвитку програмної системи.
2.	У розділах 1.1 (Background) і 1.2 (Business Opportunity) перевірити зауваження, за потреби внести правки.
3.	У розділах 2.1 (Vision Statement) і 2.2 (Major Features) змінити опис рішення, додавши нову функціональність системи, пов’язану з розширенням бізнес-логіки, веб- і мобільного застосунку.
4.	У розділі 3.1 (Scope of Initial Release) доповнити опис реалізованої системи, деталізувати серверну частину, описати реалізацію бізнес-логіки, математичної обробки, резервного копіювання, повного адміністрування трьох рівнів, IoT-компоненту, веб- і мобільного клієнтів.
5.	У розділі 3.2 (Scope of Subsequent Releases) доповнити план розвитку системи, зокрема впровадження інтелектуальних можливостей (аналіз тенденцій, рекомендації тощо).
6.	Оновлений документ Vision and Scope експортувати у формат PDF та завантажити на dl.nure.ua у відповідний розділ курсу.
7.	Додати документ у GitHub-репозиторій у директорію Pract2 (разом із файлом README.md із коротким описом виконаної роботи).
8.	Створити та опублікувати на YouTube відеозапис доповіді.
9.	Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Lab1 у репозиторії GitHub.

3 ОПИС ВИКОНАНОЇ РОБОТИ
1.	Було взято попередню версію документа Vision and Scope, підготовлену для першої версії програмної системи.
2.	Було актуалізовано розділи 1.1 (Background) та 1.2 (Business Opportunity), із урахуванням збереження загальної концепції та уточнення формулювань.
3.	Було повністю оновлено розділи 2.1 (Vision Statement) та 2.2 (Major Features), додавши опис нової функціональності: розширено можливості серверної частини, додано розробку веб-інтерфейсу та мобільного застосунку.
4.	Було доповнено розділ 3.1 (Scope of Initial Release), детально описавши реалізовану функціональність серверної частини, IoT-клієнта, обробку даних, бізнес-логіку, створення резервних копій, повноцінне трирівневе адміністрування системи.
5.	Було оновлено розділ 3.2 (Scope of Subsequent Releases), де передбачено реалізацію розширених можливостей аналізу даних, застосування штучного інтелекту для оптимізації використання продуктів.
6.	Оновлений документ було підготовлено для експорту у формат PDF і подальшого завантаження до навчальної платформи та GitHub-репозиторію.

4 ВИСНОВКИ
У результаті виконання лабораторної роботи було оновлено та розширено документ Vision and Scope для програмної системи контролю свіжості продуктів у холодильнику. Було актуалізовано існуючі розділи, внесено зміни відповідно до нових вимог, додано функціональність веб- і мобільного застосунків, а також деталізовано розширення серверної частини. Особливу увагу приділено опису бізнес-логіки, резервного копіювання даних, трирівневого адміністрування системи, впровадженню аналітичних можливостей та використанню сучасних технологій обробки даних. 

ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді
Відеозапис доповіді на YouTube: https://youtu.be/ocouHJ1csck.
Хронологічний опис доповіді:
1. 00:00 - Привітання; 
2. 00:10 - Опис звіту до лабораторної роботи 1; 
3. 00:31 - Зміна версії Vision & Scope; 
4. 00:49 - Зміна в розділі 1.1. Background та 1.2. Business Opportunity; 
5. 01:24 - Зміни розділу 2.1 Vision Statement; 
6. 01:59 - Зміни розділу 2.2. Major Features; 
7. 02:40 - Зміни розділу 3.1. Scope of Initial Release; 
8. 05:33 - Зміни розділу 3.2 Scope of Subsequent Releases; 
9. 06:46 - Опис бізнес-логіки; 
10. 07:35 - Опис математики; 
11. 08:26 - Опис адміністрування; 
12. 09:33 - Зміни розділу 4.3. Operating Environment; 
13. 10:21 - Висновки; 
14. 10:50 - Завершення.	
 
ДОДАТОК Б


Vision and Scope Document

for
Програмна система для контролю свіжості продуктів у
холодильнику

Версія 2.0


Підготовлено студенткою групи ПЗПІ-22-6, Каленик В.О.


Харківський національний університет радіоелектроніки


28.04.2025
 
Table of Contents
Table of Contents	4
Revision History	4
1.	Business Requirements	5
1.1.	Background	5
1.2.	Business Opportunity	5
2.	Vision of the Solution	7
2.1.	Vision Statement	7
2.2.	Major Features	8
3.	Scope and Limitations	9
3.1.	Scope of Initial Release	9
3.2.	Scope of Subsequent Releases	10
4.	Business Context	11
4.3.	Operating Environment	11




Revision History



Name	Date	Reason For Changes	Version
Каленик В. О.	17.11.2024		1.0
Каленик В. О.	28.04.2025		2.0
 
1	Business Requirements
1.1.	Background
Контроль свіжості продуктів є важливим аспектом для зменшення харчових відходів та покращення ефективності їх використання. У багатьох домогосподарствах щодня викидаються продукти через непомітне спливання терміну придатності. Неправильне зберігання продуктів може спричинити псування навіть до вказаного терміну, створюючи ризики для здоров’я.
Метою створення програмної системи для контролю свіжості продуктів у холодильнику є впровадження розумного рішення для:
•	Моніторингу умов зберігання продуктів;
•	Автоматичного відстеження термінів придатності;
•	Попередження користувачів про ризик псування. Це сприятиме:
•	Зменшенню кількості харчових відходів;
•	Заощадженню коштів користувачів;
•	Захисту від ризиків отруєння;
•	Формуванню екологічної свідомості.

1.2.	Business Opportunity
Зараз багато компаній розробляють технології, спрямовані на покращення умов зберігання продуктів у холодильниках, і на ринку вже представлені певні аналоги. Ці технології мають на меті зменшити втрати їжі та покращити зручність користувачів. Наприклад, HyperFresh від Siemens використовує сенсори для моніторингу температури та вологості у спеціальних зонах холодильника, що дозволяє створювати оптимальні умови для зберігання продуктів. Аналогічно, технологія BioFresh, застосована в холодильниках Liebherr, забезпечує збереження продуктів у спеціальних відсіках з температурою близькою до 0°C. Такі рішення ефективно працюють для підтримання якості продуктів, однак вони обмежені інтеграцією лише в холодильники конкретних виробників. Інші інновації включають розробку окремих пристроїв, як-от NFC-датчики, що дозволяють відстежувати свіжість продуктів. Наприклад, у Туреччині було створено NFC-датчик для холодильників, який відстежує стан продуктів та попереджає про можливе псування. Ці пристрої пропонують гнучкість і можуть бути встановлені в різних холодильниках, проте їх функціонал залишається досить обмеженим.
Запропонована програмна система для контролю свіжості продуктів у холодильнику має низку суттєвих переваг перед існуючими рішеннями. По- перше, система є універсальною та може бути інтегрована в будь-який холодильник, незалежно від його моделі чи виробника. По-друге, її функціонал розширений завдяки використанню RFID-міток, які дозволяють автоматично відстежувати терміни придатності продуктів і сповіщати користувача про їхній стан. По-третє, система включає мобільний додаток, за допомогою якого користувачі можуть отримувати сповіщення про необхідність використання продуктів, переглядати історію зберігання та отримувати рекомендації щодо оптимального використання продуктів.
Ця	система	орієнтована	на	широке	коло	споживачів,	включаючи домогосподарства, ресторани, готелі та заклади громадського харчування. Ринок таких рішень є перспективним через постійне зростання попиту на технології, які допомагають зменшити харчові відходи та заощадити ресурси.
Модель монетизації може включати продаж пристроїв та підписку на преміум-функції мобільного додатку, такі як розширена аналітика, персоналізовані рекомендації та інші послуги. Додатково, є можливість партнерства з виробниками холодильників, які можуть інтегрувати систему як додаткову функцію в нові моделі техніки.
 
2	Vision of the Solution
2.1.	Vision Statement
Програмна система для контролю свіжості продуктів у холодильнику є комплексним рішенням, яке об’єднує серверну частину, IoT-клієнт, вебзастосунок і мобільний додаток для повного моніторингу умов зберігання харчових продуктів. Основною метою системи є зменшення харчових відходів, оптимізація використання продуктів і формування екологічно свідомого споживання.
Система реалізує збір даних за допомогою вбудованих сенсорів температури, вологості та RFID-міток, що автоматично зчитують інформацію про терміни придатності та умови зберігання. Уся отримана інформація передається до серверної частини, де здійснюється обробка, аналіз даних, прогнозування можливості псування продуктів і генерація рекомендацій для користувачів. Сервер також забезпечує створення резервних копій даних, адміністрування облікових записів і централізоване управління бізнес-логікою.
Вебзастосунок надає розширені можливості управління списком продуктів, перегляду аналітичних звітів і налаштування параметрів системи через інтерактивний інтерфейс. Мобільний додаток забезпечує миттєвий доступ до інформації про стан продуктів, сповіщення про наближення термінів придатності, рекомендації щодо оптимального використання продуктів і персоналізовані пропозиції.
Ключовою особливістю є інтеграція механізмів штучного інтелекту для прогнозування псування продуктів, оптимізації запасів і формування індивідуальних порад на основі аналізу історії використання. Таким чином, система орієнтована на широке коло користувачів — від індивідуальних користувачів до ресторанів та супермаркетів, які потребують ефективного управління запасами.
 
2.2.	Major Features
MF-1. Контроль умов зберігання
Система автоматично відстежує температуру та вологість у холодильнику за допомогою вбудованих сенсорів. Це дозволяє підтримувати оптимальні умови для зберігання різних типів продуктів, зменшуючи ризик їх псування.
MF-2. Відстеження термінів придатності
RFID-мітки, прикріплені до продуктів, дозволяють зчитувати та зберігати інформацію про їх термін придатності. Система обробляє ці дані та попереджає користувача про наближення закінчення терміну придатності.
MF-3. Автоматизовані сповіщення
Користувачі отримують сповіщення через мобільний додаток, коли термін придатності продукту наближається до завершення. Це допомагає уникати псування їжі та вчасно використовувати продукти.
MF-4. Інтерфейс для управління продуктами
Мобільний додаток надає користувачам зручний інтерфейс для перегляду списку продуктів із детальною інформацією про їх стан, терміни придатності та прогнозовану дату використання. Інтерфейс також дозволяє вводити нові продукти та змінювати їх статус.
MF-5. Аналітика та звітність
Серверна частина зберігає історичні дані про зберігання продуктів і формує аналітичні звіти для користувачів. Ці звіти дозволяють відстежувати ефективність використання продуктів та оптимізувати їх зберігання.
MF-6. Адміністрування системи
Веб-інтерфейс дозволяє налаштовувати роботу системи, додавати або видаляти сенсори, керувати користувацькими обліковими записами та слідкувати за загальним станом системи.
MF-7. Прогнозування псування продуктів
  Інтелектуальний модуль прогнозування аналізує історичні дані про умови зберігання, поведінку продуктів і зовнішні фактори для оцінки ймовірності псування кожного продукту, що дає змогу оптимізувати їх використання.
MF-8. Інтеграція механізмів штучного інтелекту
       Система впроваджує моделі машинного навчання для персоналізованих рекомендацій щодо вживання продуктів, прогнозування оптимального часу споживання та підвищення ефективності управління запасами.

3	Scope and Limitations
3.1.	Scope of Initial Release
У рамках оновленого випуску програмного продукту буде здійснено розширення функціональності серверної частини, створено вебзастосунок та мобільний застосунок для взаємодії користувачів із системою. Збір даних із сенсорів температури, вологості та RFID-міток, реалізований на попередньому етапі, буде збережений та інтегрований у повноцінну архітектуру системи.

3.1.1. Серверна частина:
СЧ-1. Розширення обробки даних із сенсорів для прогнозування термінів зберігання продуктів за допомогою математичних моделей, що враховують зміну температури та вологості.
СЧ-2. Реалізація механізмів аналітики даних: створення аналітичних звітів про ефективність використання продуктів, прогнозування ризику псування.
СЧ-3. Впровадження багаторівневого адміністрування:
•	адміністрування бізнес-логіки (керування продуктами, налаштування правил сповіщення, управління профілями користувачів),
•	адміністрування обслуговуючих процесів (моніторинг сенсорів, стану API, обробка збоїв),
•	адміністрування інфраструктури (розгортання системи, створення резервних копій, міграція баз даних).
СЧ-4. Автоматизація процесів резервного копіювання даних продуктів і сенсорів із можливістю відновлення.
СЧ-5. Забезпечення масштабованої архітектури для підтримки IoT-клієнтів, вебзастосунку та мобільного застосунку через захищене API.
3.1.2. IoT-клієнт:
ІК-1. Використання раніше реалізованого модуля налаштування сенсорів температури, вологості та RFID-зчитувачів.
ІК-2. Передача даних до серверної частини у реальному часі з підтримкою синхронізації стану продуктів.
ІК-3. Забезпечення коректної роботи кількох сенсорів одночасно для моніторингу різних зон холодильника.
3.1.3. Веб-застосунок:
ВІ-1. Реалізація веб-інтерфейсу для кінцевих користувачів для перегляду стану продуктів, термінів придатності, рекомендацій щодо використання.
ВІ-2. Реалізація адміністративної панелі для налаштування бізнес-логіки, сповіщень, користувачів та моніторингу роботи сенсорів.
ВІ-3. Забезпечення обміну даними із серверною частиною через REST API.
3.1.4. Мобільний застосунок:
МД-1. Реалізація мобільного додатка для перегляду списку продуктів, отримання сповіщень про наближення терміну придатності.
МД-2. Підтримка push-сповіщень для актуалізації інформації у режимі реального часу.
МД-3. Синхронізація мобільного застосунку із серверною частиною через захищене API.
3.1.5. Розгортання системи:
РС-1. Створення середовища для запуску розширеної серверної частини із забезпеченням безперервної доступності.
РС-2. Реалізація механізмів автоматичного створення резервних копій даних та їх відновлення.
РС-3. Забезпечення безпечного розгортання мобільного та вебзастосунків із підтримкою оновлень і масштабування.

3.2.	Scope of Subsequent Releases
 У рамках наступних етапів розробки програмного продукту буде зосереджено увагу на подальшому розширенні функціональності системи для підвищення її інтелектуальності, зручності використання та інтеграції додаткових сервісів.
3.2.1. Інтелектуальні функції:
ІФ-1. Реалізація базового модуля прогнозування швидкості псування продуктів на основі історичних даних та умов зберігання із використанням простих моделей машинного навчання.
ІФ-2. Впровадження механізму рекомендацій щодо оптимального використання продуктів перед закінченням терміну придатності.
3.2.2. Додаткові сервіси:
ДС-1. Інтеграція сервісу надсилання електронних листів або повідомлень у месенджерах (наприклад, Telegram) для сповіщення користувачів про важливі події.
ДС-2. Розширення аналітичної функціональності системи: побудова базових діаграм використання продуктів за періодами.
3.2.3. Покращення мобільного застосунку:
МП-1. Додавання можливості сканування QR-кодів продуктів для спрощення введення даних у мобільному застосунку.
МП-2. Підтримка офлайн-режиму із синхронізацією даних після відновлення з’єднання..
4	Business Context

4.3.	Operating Environment
Для реалізації програмного продукту буде використано сучасні технології, що забезпечують ефективність роботи системи, її масштабованість і зручність для кінцевих користувачів. Основою серверної частини залишається платформа Node.js, яка відповідає за обробку HTTP-запитів, реалізацію бізнес-логіки та взаємодію з базою даних MySQL для структурованого зберігання інформації про продукти, користувачів та аналітичні дані.
API для взаємодії з системою розроблятиметься вручну без використання сторонніх бібліотек, із застосуванням стандартного модуля http, що дозволить забезпечити максимальний контроль над обробкою запитів. Окремо буде впроваджено аналітичні сервіси для прогнозування можливості псування продуктів на основі історичних даних. Усі SQL-запити до бази даних будуть створені вручну для повного контролю над логікою взаємодії з даними.
Імітація роботи сенсорів температури, вологості та RFID-міток вже реалізована через серверні скрипти, що генерують реалістичні дані в режимі реального часу.
Розробка веб-застосунку здійснюватиметься за допомогою фреймворку Angular із використанням базових можливостей для організації модульної структури додатка та інтеграції з API серверної частини. Окрім веб-інтерфейсу, буде створено мобільний застосунок для платформи Android з використанням мови Kotlin. Це дозволить користувачам отримувати доступ до функціональності системи безпосередньо зі смартфонів на базі Android.
 Програмне забезпечення розроблятиметься у середовищі Visual Studio Code. Для тестування API буде використовуватися Postman, а для адміністрування бази даних — DBeaver, що забезпечить контроль за цілісністю та структурою даних. 
Щодо нефункціональних вимог:
НВ-1. Доступність
Система повинна забезпечувати доступність через локальний сервер із підтримкою HTTP-запитів. У майбутньому можлива інтеграція з хмарними сервісами для забезпечення віддаленого доступу. Доступ до API повинен бути безперебійним у межах локальної мережі.
НВ-2. Надійність
Система має стабільно обробляти запити навіть при генерації великої кількості імітованих даних. У разі збою сервер повинен відновлювати роботу автоматично без втрати даних. Усі дані, що надходять до бази, мають проходити валідацію, щоб уникнути внесення некоректної інформації.
НВ-3. Продуктивність
Система повинна забезпечувати обробку до 50 одночасних запитів із середнім часом відповіді не більше 500 мс. Імітація даних сенсорів повинна працювати в реальному часі без затримок. База даних має бути оптимізована для швидкого виконання запитів навіть за збільшення обсягу даних.
НВ-4. Цілісність
База даних повинна гарантувати унікальність кожного запису про продукт, включаючи терміни придатності та умови зберігання. Дані про імітовані сенсори повинні відповідати реалістичним сценаріям використання. Канали передачі даних між компонентами системи повинні бути захищені, щоб уникнути втрати чи пошкодження інформації.
НВ-5. Масштабованість
Система повинна бути готовою до розширення у майбутньому, включаючи інтеграцію реальних сенсорів і додавання нових функцій без значних змін у базовій архітектурі.
НВ-6. Юзабіліті
Інтерфейси системи, зокрема API, повинні бути інтуїтивно зрозумілими для розробників. Уся документація (інструкції з використання, опис API) має бути доступною та зрозумілою.

Список використаних джерел:
1.	Siemens. HyperFresh Technology. URL: https://www.siemens-home.bsh- group.com/ua/ru/inspiration/innovation/isensoric/oxlazdenie (дата звернення: 15.11.2024);
2.	Liebherr. BioFresh Technology. URL: https://www.liebherr.com (дата звернення: 15.11.2024);
3.	Angular	Framework	Documentation.	URL:	https://angular.io/	(дата звернення: 17.11.2024);
4.	Node.js	Official	Website.	URL:	https://nodejs.org/	(дата	звернення: 17.11.2024);
5.	DBeaver	Database	Management	Tool.	URL:	https://dbeaver.io/	(дата звернення: 17.11.2024);
6.	Postman	API	Testing	Tool.	URL:	https://www.postman.com/	(дата звернення: 17.11.2024).
