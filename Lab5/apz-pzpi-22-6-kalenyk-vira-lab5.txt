МІНІСТЕРСТВО ОСВІТИ I НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії




ЗВІТ
до лабораторної роботи № 5
з дисципліни «Архітектура програмного забезпечення»
на тему «Розгортання програмної архітектури та створення і тестування програмного коду бази даних, серверу, мобільного й веб-клієнтів»




Виконала:                                                     	Перевірив:
ст. гр. ПЗПІ-22-6,                                           	 	ст. викл. каф. ПІ,
Каленик Віра Олександрівна					                            Сокорчук Ігор Петрович







Харків 2025

1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	03.05.2025	0.1	Оформлено титульну сторінку звіту, сформовано перелік завдань, підготовлено розділ «Завдання».
2	04.05.2025	0.2	Виконано розгортання програмної системи. Сформовано розділ «Опис виконаної роботи».
3	05.05.2025	0.3	Проведено тестування основних сценаріїв роботи, оновлено розділ «Висновки» та додано додатки з фрагментами коду.

2 ЗАВДАННЯ

Завдання до лабораторної 5:
1.	Виконати розгортання готової багатокомпонентної програмної системи, що складається з бази даних, серверної частини, web-, мобільного та IoT-клієнтів.
2.	Налаштувати підключення всіх компонентів системи та забезпечити їх коректну взаємодію.
3.	Запустити систему у локальному середовищі та перевірити її роботу за основними сценаріями.
4.	Провести тестування працездатності всіх компонентів системи.
5.	Створити та опублікувати на YouTube відеозапис тестування із демонстрацією основного функціоналу мобільного застосунку та поясненням прийнятих інженерних рішень.
6.	Оформити звіт за результатами лабораторної роботи, додавши розділи: аналіз завдання, опис архітектури, специфікацію реалізованих функцій, UML-діаграми, текстовий опис програмної реалізації, результати тестування, висновки, а також додатки з фрагментами коду.
7.	Завантажити звіт у форматі PDF на платформу dl.nure.ua і додати посилання на відео в коментарях до роботи. 

3	ОПИС ВИКОНАНОЇ РОБОТИ

1.	Для розгортання системи обрано Docker, оскільки цей інструмент дозволяє запускати всі сервіси ізольовано, швидко піднімати потрібне оточення і легко переносити проект між різними машинами. Встановлено Docker Desktop, перевірено його роботу локально.
2.	Всі конфігураційні файли проекту, зокрема docker-compose.yml, були підготовлені так, щоб одночасно запускати базу даних, серверну частину, web-клієнт і IoT-клієнт. Кожен компонент описаний як окремий сервіс зі своїми параметрами.
3.	Додано Dockerfile для кожного модуля, де вказано базовий образ, команди для встановлення залежностей та запуску відповідного застосунку. Особливу увагу приділено правильній передачі змінних оточення для підключення до бази даних і API.
4.	Базу даних розгорнуто окремим контейнером. Виконано міграцію даних: зроблено експорт існуючої бази через mysqldump зі старого контейнера, потім дамп було імпортовано у новий контейнер, щоб зберегти всі таблиці та записи.
5.	Після запуску всі контейнери перевірялися через docker ps та Docker Desktop. Переконанося, що база, бекенд, web- і IoT-клієнти піднялися без помилок, відкрилися потрібні порти, а сервіси “бачать” один одного у спільній мережі.
6.	Проведено тестовий запуск: сервер перевірено через доступ до API, web-клієнт — через браузер, IoT-клієнт — за логами відправки даних. У випадку виникнення помилок проводилося повторне налаштування змінних оточення, перевірка порядку старту контейнерів і перезапуск необхідних сервісів.
7.	Для мобільного застосунку було оновлено адресу підключення до серверу, щоб забезпечити доступ із фізичного пристрою або емулятора. Додаток підключався до розгорнутого API, і всі основні сценарії перевірялися у живому режимі.
8.	Після успішного запуску всієї системи і тестування основних сценаріїв роботи, зафіксовано результат, зроблено скріншоти робочих інтерфейсів і логи IoT-клієнта для включення у звіт (додаток Б).
9.	Підготовлено та опубліковано відеозапис із демонстрацією роботи мобільного застосунку, де детально показано основні функції, сценарії використання та особливості реалізації клієнтської логіки.
10.	Оформлено звіт за результатами лабораторної роботи, що містить аналіз виконаних завдань, опис архітектури застосунку, специфікацію реалізованих функцій, UML-діаграми, опис реалізації, результати тестування, висновки й додатки з ключовими фрагментами коду.
 
4	ВИСНОВКИ

У результаті виконання лабораторної роботи було впроваджено багатокомпонентну програмну систему, що об’єднує серверну частину, базу даних, web-клієнт, мобільний застосунок і IoT-клієнт. Всі компоненти системи були розгорнуті за допомогою Docker, налаштовані для коректної взаємодії в єдиному середовищі та протестовані на реальних сценаріях роботи. Забезпечено повноцінну передачу й обробку даних між модулями, автоматизовано оновлення інформації про стан сенсорів за допомогою IoT-клієнта. Оновлено налаштування мобільного застосунку для підключення до актуального API-сервера. 
 
ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/M92XdT2puHk.
Хронологічний опис доповіді: 
1.	00:00 – Привітання; 
2.	00:21 – Огляд звіту;
3.	00:32 – Опис архітектури програмної системи;
4.	02:33 – Огляд коду файлу Dockerfile для серверу програмної системи;
5.	03:46 – Огляд коду файлу Dockerfile для IoT-клієнту програмної системи;
6.	04:30 – Огляд коду файлу Dockerfile для веб-клієнту програмної системи;
7.	05:31 – Огляд коду файлу docker-compose.yml;
8.	06:52 – Опис розгортання для мобільного клієнта;
9.	07:00 – Запуск контейнеру;
10.	 07:10 – Тестування розгорнутого веб-клієнта;
11.	 09:07 – Тестування мобільного клієнта;
12.	 10:46 – Перевірка роботи розгорнутого IoT-клієнта шляхом переглядання логів в docker;
13.	 11:14 – Висновки;
14.	  11:58 – Завершення. 

Додаток Б
Графічні матеріали
 
Рисунок Б.1 – Архітектура програмної системи
 
Рисунок Б.2 - Запущені контейнери системи у Docker Desktop
 
Рисунок Б.3 - Перша сторінка web-клієнта
 
Рисунок Б.4 - Логи IoT-клієнта з підтвердженням відправки сенсорних даних

Додаток В
Фрагменти коду

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab3/apz-pzpi-22-6-kalenyk-vira-lab3/src/app/core/utils/analytics.utils.ts.
1.	const temps = data.map(d => d.Temperature);
2.	const humidities = data.map(d => d.Humidity);
3.	
4.	const avgTemp = temps.reduce((a, b) => a + b, 0) / temps.length;
5.	const avgHumidity = humidities.reduce((a, b) => a + b, 0) / humidities.length;
6.	
7.	const variance = temps.reduce((sum, t) => sum + (t - avgTemp) ** 2, 0) / temps.length;
8.	const stddev = Math.sqrt(variance);
9.	const stabilityCoeff = 1 - stddev / avgTemp;
10.	
11.	const x = data.map((_, i) => i);
12.	const y = temps;
13.	const n = x.length;
14.	const sumX = x.reduce((a, b) => a + b, 0);
15.	const sumY = y.reduce((a, b) => a + b, 0);
16.	const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
17.	const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);
18.	const trend = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
19.	
20.	let maxViolation = 0, current = 0;
21.	for (const t of temps) {
22.	  if (t < 2 || t > 8) { current++; maxViolation = Math.max(maxViolation, current); }
23.	  else { current = 0; }
24.	}

В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab3/apz-pzpi-22-6-kalenyk-vira-lab3/src/app/pages/admin_panel/admin/users/users.component.ts.
1.	editUser(user: any) {
2.	  this.selectedUser = { ...user };
3.	  this.showEditModal = true;
4.	}
5.	
6.	saveUserChanges() {
7.	  this.adminService.updateUser(this.selectedUser).subscribe(() => {
8.	    this.loadUsers(); // Оновити список після зміни
9.	    this.showEditModal = false;
10.	  });
11.	}
12.	
13.	deleteUser(userId: string) {
14.	  if (confirm('Ви впевнені, що хочете видалити користувача?')) {
15.	    this.adminService.deleteUser(userId).subscribe(() => {
16.	      this.loadUsers();
17.	    });
18.	  }
19.	}

В.3 Резервне копіювання користувацьких даних
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab3/apz-pzpi-22-6-kalenyk-vira-lab3/src/app/pages/admin_panel/admin/database/database.component.ts.
1.	backupDatabase() {
2.	return this.http.post('/api/admin/backup', {});
3.	}
4.	restoreDatabase(file: File) {
5.	const formData = new FormData();
6.	formData.append('backup', file);
7.	return this.http.post('/api/admin/restore', formData);
8.	}

В.4 Docker-compose.yml (головний файл розгортання системи)
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab5/apz-pzpi-22-6-kalenyk-vira-lab5/docker-compose.yml.
1.	version: '3.8'
2.	services:
3.	  db:
4.	    image: mysql:latest
5.	    environment:
6.	      MYSQL_ROOT_PASSWORD: PASSWORD
7.	      MYSQL_DATABASE: fridge_system
8.	    volumes:
9.	      - db_data:/var/lib/mysql
10.	    #ports:
11.	      #- "3306:3306"
12.	  app:
13.	    build: .
14.	    ports:
15.	      - "3000:3000"
16.	    env_file: .env
17.	    depends_on:
18.	      - db
19.	  web:
20.	    build:
21.	      context: ../WebClient/web
22.	    ports:
23.	      - "4200:80"
24.	    depends_on:
25.	      - app
26.	  iot:
27.	    build:
28.	      context: ../IoTClient
29.	    environment:
30.	      - API_URL=http://app:3000
31.	    depends_on:
32.	      - app
33.	volumes:
34.	  db_data:
 
В.5 Dockerfile для web-клієнта
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab5/apz-pzpi-22-6-kalenyk-vira-lab5/Dockerfile.
1.	# Build stage
2.	FROM node:20 AS build
3.	
4.	WORKDIR /app
5.	COPY package*.json ./
6.	RUN npm install
7.	COPY . .
8.	RUN npm run build
9.	
10.	# Production stage
11.	FROM nginx:alpine
12.	
13.	# Копіюємо те, що реально містить index.html
14.	COPY --from=build /app/dist/web/browser /usr/share/nginx/html
15.	
16.	EXPOSE 80
17.	
18.	CMD ["nginx", "-g", "daemon off;"]
