МІНІСТЕРСТВО ОСВІТИ I НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії




ЗВІТ
до лабораторної роботи № 4
з дисципліни «Архітектура програмного забезпечення»
на тему «Розробка програмної архітектури та створення і відлагодження програмного коду мобільного клієнта програмної системи»




Виконала:                                     Перевірив:
ст. гр. ПЗПІ-22-6,                            ст. викл. каф. ПІ,
Каленик Віра Олександрівна                    Сокорчук Ігор Петрович





Харків 2025

1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	01.05.2025	0.1	Оформлено титульну сторінку звіту, сформовано перелік завдань, підготовлено розділ «Завдання».
2	03.05.2025	0.2	Створено UML-діаграми: Deployment Diagram, Use Case Diagram, ER Diagram та Component Diagram. Сформовано розділ «Опис виконаної роботи».
3	05.05.2025	0.3	Проведено тестування основних сценаріїв роботи, оновлено розділ «Висновки» та додано додатки з фрагментами коду.

2 ЗАВДАННЯ

Завдання до лабораторної 4:
1.	Розробити архітектуру мобільного програмного застосунку для програмної системи.
2.	Реалізувати мобільний застосунок, забезпечивши його повноцінну взаємодію з іншими частинами системи, підтримку авторизації, відображення основних даних, роботу з API.
3.	Забезпечити захист персональних даних на рівні мобільного застосунку: коректна робота з токенами, захищене зберігання даних, аутентифікація, обмеження доступу до ресурсів залежно від ролі користувача.
4.	Розробити та оформити чотири діаграми UML для мобільного застосунку: діаграму прецедентів, діаграму компонентів, а також дві на вибір з  ER-моделі даних, діаграми пакетів, діаграми взаємодії, діаграми діяльності та діаграми станів.
5.	Провести функціональне тестування мобільного застосунку, перевірити коректність основних сценаріїв роботи, авторизацію, налаштування локалізації, роботу з API та взаємодію із серверною частиною.
6.	Створити та опублікувати на YouTube відеозапис тестування із демонстрацією основного функціоналу мобільного застосунку та поясненням прийнятих інженерних рішень.
7.	Оформити звіт за результатами лабораторної роботи, додавши розділи: аналіз завдання, опис архітектури, специфікацію реалізованих функцій, UML-діаграми, текстовий опис програмної реалізації, результати тестування, висновки, а також додатки з фрагментами коду.
8.	Завантажити звіт у форматі PDF на платформу dl.nure.ua і додати посилання на відео в коментарях до роботи. 

3 ОПИС ВИКОНАНОЇ РОБОТИ

1.	Розроблено архітектуру мобільного застосунку системи контролю свіжості продуктів у холодильнику. Визначено основну структуру проєкту, обрано архітектурний підхід із виокремленням основних компонентів: екранів для реєстрації, автентифікації, перегляду холодильників, продуктів та аналітики, а також сервісів для взаємодії з серверною частиною через REST API.
2.	Реалізовано мобільний застосунок на Kotlin для платформи Android, який забезпечує базову роботу користувача з ключовими сутностями: створення й редагування профілю, додавання та видалення холодильників, керування списком продуктів, перегляд історії даних із сенсорів.
3.	Запроваджено механізми автентифікації та авторизації з використанням JWT-токенів. Реалізовано захищене зберігання токена в локальному сховищі, автоматичну перевірку сесії, а також контроль доступу до ресурсів відповідно до ролі користувача.
4.	Реалізовано відображення аналітичних показників роботи холодильника: побудова графіків температури й вологості на основі даних із сенсорів, відображення ключових характеристик (середні значення, тренди, періоди відхилення від норми).
5.	Забезпечено повноцінну взаємодію застосунку з серверною частиною за допомогою власних сервісів для роботи з холодильниками, продуктами, сенсорами, авторизацією та аналітикою. Передбачено обробку типових помилок з боку API та відображення відповідних повідомлень користувачу.
6.	Розроблено та оформлено чотири UML-діаграми для візуалізації архітектури й логіки мобільного застосунку: діаграму прецедентів (Use Case), діаграму компонент, а також ще дві діаграми на вибір (наприклад, ER-модель та діаграма діяльності).
7.	Проведено функціональне тестування мобільного застосунку: перевірено коректність автентифікації, роботу основних сценаріїв (створення та редагування даних), відображення аналітики, динамічне оновлення списків сутностей, а також стабільність застосунку у типових ситуаціях.
8.	Підготовлено та опубліковано відеозапис із демонстрацією роботи мобільного застосунку, де детально показано основні функції, сценарії використання та особливості реалізації клієнтської логіки.
9.	Оформлено звіт за результатами лабораторної роботи, що містить аналіз виконаних завдань, опис архітектури застосунку, специфікацію реалізованих функцій, UML-діаграми, опис реалізації, результати тестування, висновки й додатки з ключовими фрагментами коду.

4 ВИСНОВКИ

У результаті виконання лабораторної роботи було розроблено мобільний застосунок програмної системи контролю свіжості продуктів у холодильнику відповідно до вимог. Сформовано архітектуру застосунку, реалізовано процеси реєстрації та автентифікації користувачів, роботу з основними сутностями (холодильники, продукти, сенсори), а також візуалізацію аналітичних даних із використанням графіків. Забезпечено захищену взаємодію із серверною частиною, коректну обробку помилок і зручність інтерфейсу для кінцевих користувачів. Проведене тестування, яке підтвердило стабільну роботу основних сценаріїв і коректну інтеграцію з серверною частиною системи.
 
ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/3SHCRPFrVP8.
Хронологічний опис доповіді: 
1.	00:00 - Привітання; 
2.	00:21 – Огляд звіту;
3.	00:35 – Опис діаграми прецедентів для мобільного клієнта;
4.	01:05 – Опис діаграми компонентів мобільного клієнта;
5.	01:49 – Опис діаграми активності;
6.	02:12 – Опис діаграми станів;
7.	02:19 – Огляд архітектури клієнтської частини програмної системи;
8.	04:17 – Захист, збереження та обробка даних користувача мобільним клієнтом;
9.	05:00 – Тестування мобільного клієнта програмної системи;
10.	 05:36 – Тестування валідації та реєстрації;
11.	 06:26 – Вхід в застосунок;
12.	 06:47 – Огляд головної сторінки та тестування додавання, редагування, видалення холодильників;
13.	 07:41 – Огляд сторінки продуктів та тестування дій щодо них;
14.	 08:43 – Огляд сторінки аналітики, огляд розрахунків та діаграм;
15.	 11:59 – Висновки;
16.	 12:29 – Завершення. 


Додаток Б
Графічні матеріали

Рисунок Б.1 - UML діаграма прецедентів
 
Рисунок Б.2 - Діаграма компонентів
 
Рисунок Б.3 - Діаграма взаємодії
 
Рисунок Б.4 - Діаграма станів 

Додаток В
Фрагменти коду

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab4/apz-pzpi-22-6-kalenyk-vira-lab4/java/com/example/mobileapz/api/ComputeAnalytics.kt.
1.	data class AnalyticsResult(
2.	    val avgTemp: Double,
3.	    val avgHumidity: Double,
4.	    val stabilityCoeff: Double,
5.	    val trend: Double,
6.	    val maxViolationDuration: Int
7.	)
8.	
9.	fun computeAnalytics(data: List<SensorDataPoint>): AnalyticsResult {
10.	    if (data.isEmpty()) {
11.	        return AnalyticsResult(0.0, 0.0, 0.0, 0.0, 0)
12.	    }
13.	    val temps = data.map { it.Temperature }
14.	    val humidities = data.map { it.Humidity }
15.	    val avgTemp = temps.average()
16.	    val avgHumidity = humidities.average()
17.	
18.	    val variance = temps.sumOf { (it - avgTemp) * (it - avgTemp) } / temps.size
19.	    val stddev = Math.sqrt(variance)
20.	    val stabilityCoeff = if (avgTemp != 0.0) 1 - stddev / avgTemp else 0.0
21.	
22.	    val x = temps.indices.map { it.toDouble() }
23.	    val y = temps
24.	    val n = x.size
25.	    val sumX = x.sum()
26.	    val sumY = y.sum()
27.	    val sumXY = x.indices.sumOf { i -> x[i] * y[i] }
28.	    val sumX2 = x.sumOf { it * it }
29.	    val trend = if (n > 1 && n * sumX2 - sumX * sumX != 0.0) {
30.	        (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)
31.	    } else 0.0
32.	
33.	    var maxViolation = 0
34.	    var current = 0
35.	    for (t in temps) {
36.	        if (t < 2 || t > 8) {
37.	            current++
38.	            if (current > maxViolation) maxViolation = current
39.	        } else {
40.	            current = 0
41.	        }
42.	    }
43.	    return AnalyticsResult(
44.	        avgTemp = avgTemp,
45.	        avgHumidity = avgHumidity,
46.	        stabilityCoeff = String.format("%.3f", stabilityCoeff).toDouble(),
47.	        trend = String.format("%.3f", trend).toDouble(),
48.	        maxViolationDuration = maxViolation
49.	    )
50.	} 

В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab4/apz-pzpi-22-6-kalenyk-vira-lab4/java/com/example/mobileapz/api/AuthService.kt.
1.	class AuthService(context: Context) {
2.	    private val prefs: SharedPreferences =
3.	        context.getSharedPreferences("auth_prefs", Context.MODE_PRIVATE)
4.	
5.	    fun saveToken(token: String) {
6.	        prefs.edit().putString("token", token).apply()
7.	    }
8.	
9.	    fun getToken(): String? = prefs.getString("token", null)
10.	
11.	    fun isAuthenticated(): Boolean = getToken() != null
12.	
13.	    fun logout() {
14.	        prefs.edit().clear().apply()
15.	    }
16.	
17.	    fun getRoleFromToken(): String? {
18.	        val token = getToken() ?: return null
19.	        return try {
20.	            val parts = token.split(".")
21.	            if (parts.size < 2) return null
22.	            val payload = String(Base64.decode(parts[1], Base64.DEFAULT))
23.	            JSONObject(payload).optString("role", null)
24.	        } catch (e: Exception) {
25.	            null
26.	        }
27.	    }
28.	
29.	    fun getUserIdFromToken(): Int? {
30.	        val token = getToken() ?: return null
31.	        return try {
32.	            val parts = token.split(".")
33.	            if (parts.size < 2) return null
34.	            val payload = String(Base64.decode(parts[1], Base64.DEFAULT))
35.	            JSONObject(payload).optInt("userId", -1).takeIf { it != -1 }
36.	        } catch (e: Exception) {
37.	            null
38.	        }
39.	    }
40.	}

В.3 Побудова графіка динаміки температури
GitHub репозиторій: https://github.com/NureKalenykVira/apz-pzpi-22-6-kalenyk-vira/blob/main/Lab4/apz-pzpi-22-6-kalenyk-vira-lab4/java/com/example/mobileapz/AnalyticsActivity.kt.
1.	val tempEntries = tempHistory.mapIndexed { i, value -> Entry(i.toFloat(), value) }
2.	val tempDataSet = LineDataSet(tempEntries, "Temp (°C)").apply {
3.	    color = Color.parseColor("#4056F4")
4.	    setCircleColor(Color.parseColor("#4056F4"))
5.	    valueTextColor = Color.BLACK
6.	    lineWidth = 2.5f
7.	    circleRadius = 4f
8.	    setDrawValues(false)
9.	    setDrawFilled(false)
10.	}
11.	val tempChart = findViewById<LineChart>(R.id.tempChart)
12.	tempChart.data = LineData(tempDataSet)
13.	tempChart.axisRight.isEnabled = false
14.	tempChart.xAxis.position = XAxis.XAxisPosition.BOTTOM
15.	tempChart.xAxis.valueFormatter = XAxisValueFormatter(tempTimestamps)
16.	tempChart.description.isEnabled = false
17.	tempChart.legend.isEnabled = false
18.	tempChart.xAxis.textColor = Color.GRAY
19.	tempChart.axisLeft.textColor = Color.GRAY
20.	tempChart.invalidate()
